//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="weburl", ConfigurationName="ServiceReference1.WebServiceSoap")]
    public interface WebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/GetAllBuildingData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void GetAllBuildingData(string clientName, string clientCode, string clientUUID, string clientPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/GetAllBuildingData", ReplyAction="*")]
        System.Threading.Tasks.Task GetAllBuildingDataAsync(string clientName, string clientCode, string clientUUID, string clientPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/Calc", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void Calc(string formula);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/Calc", ReplyAction="*")]
        System.Threading.Tasks.Task CalcAsync(string formula);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/GetBuildingData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void GetBuildingData(string clientName, string clientCode, string clientUUID, string clientPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/GetBuildingData", ReplyAction="*")]
        System.Threading.Tasks.Task GetBuildingDataAsync(string clientName, string clientCode, string clientUUID, string clientPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/GetPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void GetPassword(string clientName, string clientCode, string clientUUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/GetPassword", ReplyAction="*")]
        System.Threading.Tasks.Task GetPasswordAsync(string clientName, string clientCode, string clientUUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/GetUUID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void GetUUID(string clientName, string clientCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/GetUUID", ReplyAction="*")]
        System.Threading.Tasks.Task GetUUIDAsync(string clientName, string clientCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void Login(string clientName, string clientCode, string clientUUID, string clientPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/Login", ReplyAction="*")]
        System.Threading.Tasks.Task LoginAsync(string clientName, string clientCode, string clientUUID, string clientPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/SendHeartBeat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SendHeartBeat(string clientName, string clientCode, string clientUUID, string clientPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/SendHeartBeat", ReplyAction="*")]
        System.Threading.Tasks.Task SendHeartBeatAsync(string clientName, string clientCode, string clientUUID, string clientPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/SendMeterData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SendMeterData(string clientName, string clientCode, string clientUUID, string clientPassword, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="weburl/SendMeterData", ReplyAction="*")]
        System.Threading.Tasks.Task SendMeterDataAsync(string clientName, string clientCode, string clientUUID, string clientPassword, string data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebServiceSoapChannel : Common.ServiceReference1.WebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServiceSoapClient : System.ServiceModel.ClientBase<Common.ServiceReference1.WebServiceSoap>, Common.ServiceReference1.WebServiceSoap {
        
        public WebServiceSoapClient() {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void GetAllBuildingData(string clientName, string clientCode, string clientUUID, string clientPassword) {
            base.Channel.GetAllBuildingData(clientName, clientCode, clientUUID, clientPassword);
        }
        
        public System.Threading.Tasks.Task GetAllBuildingDataAsync(string clientName, string clientCode, string clientUUID, string clientPassword) {
            return base.Channel.GetAllBuildingDataAsync(clientName, clientCode, clientUUID, clientPassword);
        }
        
        public void Calc(string formula) {
            base.Channel.Calc(formula);
        }
        
        public System.Threading.Tasks.Task CalcAsync(string formula) {
            return base.Channel.CalcAsync(formula);
        }
        
        public void GetBuildingData(string clientName, string clientCode, string clientUUID, string clientPassword) {
            base.Channel.GetBuildingData(clientName, clientCode, clientUUID, clientPassword);
        }
        
        public System.Threading.Tasks.Task GetBuildingDataAsync(string clientName, string clientCode, string clientUUID, string clientPassword) {
            return base.Channel.GetBuildingDataAsync(clientName, clientCode, clientUUID, clientPassword);
        }
        
        public void GetPassword(string clientName, string clientCode, string clientUUID) {
            base.Channel.GetPassword(clientName, clientCode, clientUUID);
        }
        
        public System.Threading.Tasks.Task GetPasswordAsync(string clientName, string clientCode, string clientUUID) {
            return base.Channel.GetPasswordAsync(clientName, clientCode, clientUUID);
        }
        
        public void GetUUID(string clientName, string clientCode) {
            base.Channel.GetUUID(clientName, clientCode);
        }
        
        public System.Threading.Tasks.Task GetUUIDAsync(string clientName, string clientCode) {
            return base.Channel.GetUUIDAsync(clientName, clientCode);
        }
        
        public void HelloWorld() {
            base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public void Login(string clientName, string clientCode, string clientUUID, string clientPassword) {
            base.Channel.Login(clientName, clientCode, clientUUID, clientPassword);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string clientName, string clientCode, string clientUUID, string clientPassword) {
            return base.Channel.LoginAsync(clientName, clientCode, clientUUID, clientPassword);
        }
        
        public void SendHeartBeat(string clientName, string clientCode, string clientUUID, string clientPassword) {
            base.Channel.SendHeartBeat(clientName, clientCode, clientUUID, clientPassword);
        }
        
        public System.Threading.Tasks.Task SendHeartBeatAsync(string clientName, string clientCode, string clientUUID, string clientPassword) {
            return base.Channel.SendHeartBeatAsync(clientName, clientCode, clientUUID, clientPassword);
        }
        
        public void SendMeterData(string clientName, string clientCode, string clientUUID, string clientPassword, string data) {
            base.Channel.SendMeterData(clientName, clientCode, clientUUID, clientPassword, data);
        }
        
        public System.Threading.Tasks.Task SendMeterDataAsync(string clientName, string clientCode, string clientUUID, string clientPassword, string data) {
            return base.Channel.SendMeterDataAsync(clientName, clientCode, clientUUID, clientPassword, data);
        }
    }
}
